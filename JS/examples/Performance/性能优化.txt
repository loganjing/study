不要使用eval
不用使用new Function，new Array，new Object
try,catch不要用
避免全局变量的使用，如果在方法中使用了多个，先赋值给局部变量
for in不要用
string拼接
传递给setTimeout() and setInterval()函数对象，而不是string

DOM操作：
1. 离线操作，比如clone等，操作完再一次性赋值
2. 修改隐藏的元素
3. 一次性更新style
4. 避免访问节点集合。
5. 避免在循环中操作节点




1. 关于JS的循环，循环是一种常用的流程控制。JS提供了三种循环：for(;;)、while()、for(in)。在这三种循环中 for(in)的效率最差，因为它需要查询Hash键，因此应尽量少用for(in)循环，for(;;)、while()循环的性能基本持平。当然，推荐使用for循环，如果循环变量递增或递减，不要单独对循环变量赋值，而应该使用嵌套的++或--运算符。

2. 如果需要遍历数组，应该先缓存数组长度var len=arr.length; for(i=0;i<len;i++)，将数组长度放入局部变量中，避免多次查询数组长度。

3. 局部变量的访问速度要比全局变量的访问速度更快，因为全局变量其实是window对象的成员，而局部变量是放在函数的栈里的。

4. 尽量少使用eval，每次使用eval需要消耗大量时间，特别是在循环内，json[i][变量]=1;这样的语句可以不使用eval。

5. 尽量避免对象的嵌套查询，对于obj1.obj2.obj3.obj4这个语句，需要进行至少3次查询操作，先检查obj1中是否包含 obj2，再检查obj2中是否包含obj3，然后检查obj3中是否包含obj4...这不是一个好策略。应该尽量利用局部变量，将obj4以局部变量 保存，从而避免嵌套查询。

6. 使运算符时，尽量使用+＝，－＝、*＝、\=等运算符号，而不是直接进行赋值运算。

7. 当需要将数字转换成字符时，采用如下方式："" + 1。从性能上来看，将数字转换成字符时，有如下公式：("" +) > String() > .toString() > new String()。String()属于内部函数，所以速度很快。而.toString()要查询原型中的函数，所以速度逊色一些，new String()需要重新创建一个字符串对象，速度最慢。

8. 当需要将浮点数转换成整型时，应该使用Math.floor()或者Math.round()。而不是使用parseInt(),该方法用于将字符串转换成数字。而且Math是内部对象，所以Math.floor()其实并没有多少查询方法和调用时间，速度是最快的。

9.尽量作用JSON格式来创建对象，而不是var obj=new Object()方法。因为前者是直接复制，而后者需要调用构造器，因而前者的性能更好。

10.当需要使用数组时，也尽量使用JSON格式的语法，即直接使用如下语法定义数组：[parrm,param,param...],而不是采用 new Array(parrm,param,param...)这种语法。因为使用JSON格式的语法是引擎直接解释的。而后者则需要调用Array的构造器。

11. 对字符串进行循环操作，例如替换、查找，就使用正则表达式。因为JS的循环速度比较慢，而正则表达式的操作是用C写成的API，性能比较好。









 1  最小化dom访问次数，尽可能在js端执行；
     2  如果需要多次访问某个dom节点，请使用局部变量存储对它的引用；
     3  小心处理html集合，因为它实时连系着底层的文档，把集合的长度缓存到一个变量中，并在迭代中使用它，如果需要经常操作集合，建议把它拷贝到一个数组中；
     4  如果可能的话，使用速度更快的API，比如querySelectorAll和firstElementChild；
     5  要留意重绘和重排；批量修改样式时，“离线”操作dom树；使用缓存，并减少访问布局的次数；
     6  动画中使用绝对定位，使用拖放代理
     7  使用事件委托来减少事件处理器的数量

     总结下js中对数据访问的优化（节选自高性能JavaScript）

     1  函数中读写局部变量总是最快的，而全局变量的读取则是最慢的；
     2  尽可能地少用with 语句，因为它会增加with 语句以外的数据的访问代价；
     3  闭包尽管强大，但不可滥用，否则会影响到执行速度以及内存；
     4  嵌套的对象成员会明显影响性能，尽量少用；
     5  避免多次访问对象成员或函数中的全局变量，尽量将它们赋值给局部变量以缓存。

http://wenku.baidu.com/link?url=20F6J9Ul2q7KTpi8qCmfhEKoBOMAEFyPC0TQX_1240uMhS3Cf9mf5wXpUfAdtUSCA6K3py1eGQ28rR1hJh9rrcvpioYZ72slZ-Qws0jzdF3


http://wenku.baidu.com/link?url=20F6J9Ul2q7KTpi8qCmfhEKoBOMAEFyPC0TQX_1240uMhS3Cf9mf5wXpUfAdtUSCA6K3py1eGQ28rR1hJh9rrcvpioYZ72slZ-Qws0jzdF3

http://blogs.msdn.com/b/ie/archive/2006/11/16/ie-javascript-performance-recommendations-part-2-javascript-code-inefficiencies.aspx